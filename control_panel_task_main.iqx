<usermanual>
______________________________________________________________________________________________________________

									CONTROL PANEL TASK
______________________________________________________________________________________________________________

by Nidhi Desai
DEPENd lab
University of North Carolina, Chapel Hill
Built for ROSES study
______________________________________________________________________________________________________________

									BACKGROUND INFO 
______________________________________________________________________________________________________________
Reference paper:	
The cost of Pavlovian bias: maladaptive decision-making in human sign-trackers and goal-trackers.
L Degni, L Mattioni, C Danti, V Bernardi, G Finotti.

The markers sent to the eye-tracker follow the conventions mentioned here:
https://depend.slite.com/api/s/note/6mCJyMmLXvs4haxFpQJbkR/Inquisit-Eyelink-message-conventions

The markers sent to the physio equipment follow the conventions mentioned here:
https://depend.slite.com/api/s/note/4katVae9xiarhqMcWZq1P1/Inquisit-Physio-port-codes
</usermanual>

**************************************************************************************************************
Initializing the parameters 
**************************************************************************************************************
// Parameters to be fixed before the experiment
<parameters>
/ lastScriptUpdated = "10/02/2025"  // NEEDS TO BE UPDATED EVERYTIME SCRIPT IS MODIFIED 
									// Indicates the date that the Inquisit script was updated, which was used to collect the participant's data
/ includePhysio = 1					// Set this to 1 if physio data needs to be recorded
/ includeEyetracker = 1				// Set this to 1 if eye-tracking data needs to be recorded
									// Also make sure for eye-tracking the <include> function is uncommented
/ pavLeftXPos = 42%
/ pavRightXPos = 56%
/ instruITImin = 500
/ instruITImax = 1500
/ instruResponseMaxTime = 1500 // 2000
/ instruFeedbackDur = 1000

/ pitITImin = 500
/ pitITImax = 1500
/ PITResponseMaxTime = 2000
/ PITFeedbackDur = 1000

/ leftButtonBox = 3				// response pad keyboard mode = 48; 	xid mode = 48; 		normal keyboard = left arrow = 203
/ rightButtonBox = 5				// response pad keyboard mode = 33; 	xid mode =  176;	normal keyboard = right arrow = 205
/ spaceButtonBox = 4 				// response pad keyboard mode = 32; 	xid mode = 112; 	normal keyboard = space button = 57
</parameters>


**************************************************************************************************************
Defining the sequence of blocks for the experiment
**************************************************************************************************************
<expt>
/ blocks = [
	1 = experimentSetup;
	2 = soundsRating; 
	3 = introInstructions;			
	4 = instPhaseInstructions;
	5 = instBlock;
]
</expt>

**************************************************************************************************************
Physio and eye-tracker software interaction - 
make sure eye-tracker 'include' is uncommented before recording eye-tracker data
**************************************************************************************************************
<include>
/ file = "control_panel_task_physio_setup.iqx" 
/ precondition = [parameters.includePhysio == 1]
</include>

<include>
/ file = "control_panel_task_no_physio_setup.iqx"
/ precondition = [parameters.includePhysio == 0]
</include>

<include>
/ file = "control_panel_task_eyetracker_setup.iqx" 
/ precondition = [parameters.includeEyetracker == 1]
</include>

<include>
/ file = "control_panel_task_no_eyetracker_setup.iqx" 
/ precondition = [parameters.includeEyetracker == 0]
</include>

**************************************************************************************************************
Values which will be updated during the trials
**************************************************************************************************************	
<values>
/ experimentName = "control_panel_task"
/ introTextYPos = 50%
/ instInstructionIndex = 0
/ instruQuizTrialNum = 0
/ numBlockQuizzesPassedTotal = 0
/ numBlockQuizzesPassedInARow = 0
/ soundCalibrationTextIndex = 0
/ soundCalibrationTextIndex2 = 0
/ trialStartTime = 0
/ trialEndTime = 0
/ instructionIndex = 0
/ phaseName = ""
/ pavSetupTrialsCounter = 0
/ instruTrialNum = 0
/ markerETtrialID = 0
/ markerETDisplayOn = 0
/ markerETdisplayOff = 0
/ speakerOnTestNum = 0
/ chooseAversiveOutcome = 0
/ trialDur = 0
/ instRightAversiveOutcome = 0
/ instLeftAversiveOutcome = 0
/ noInstResponseOutcome = 0
/ richInstOption = 0
/ poorInstOption = 0
/ numSoundRepeated = 0
/ instruBlockNum = 0
/ pavBlockNum = 0
/ aversiveOutcomeXPos = 50%
/ aversiveOutcomeYPos = 50%
/ aversiveOutcomeSize = 73%
/ socialXPos = 50%
/ socialYPos = 60%
/ socialStimuliSize = 70%
/ socialStimuliSize_pavQuiz = 30%
/ fractalXPos = 50%
/ fractalYPos = 60%
/ fractalStimuliSize = 70%
/ fractalStimuliSize_pavQuiz = 30%
/ pavInstructionIndex = 0
/ chooseFractalStimuli = 0
/ chooseSocialStimuli = 0
/ rightInstButtonRelatedHuman = ""
/ leftInstButtonRelatedHuman = ""
/ pavOnlyHuman = ""
/ rightInstButtonRelatedFractal = ""
/ leftInstButtonRelatedFractal = ""
/ pavOnlyFractal = ""
/ tempTrialType = ""
/ pavOutcomeType = ""
/ pavQuizTrialNum = 0
/ typeOfAlert = ""
/ pavQuizOutcomeType = ""
/ pavQuizCorrectAnswer = ""
/ pavQuizAnswerGiven = ""
/ pavQuizIsCorrect = ""
/ pitITIDur = ""
/ pitTrialNum = ""
/ pavITIDur = ""
/ numPavBlockCorrectQuiz = ""
/ pavBlockQuizNumCorrect = ""
/ rightSocialTrialNum = ""
/ leftSocialTrialNum = ""
/ rightFractalTrialNum = ""
/ leftFractalTrialNum = ""
/ safeSocialTrialNum = ""
/ safeFractalTrialNum = ""
/ noPavCueTrialNum = ""
/ instruQuizResponse = ""
/ pitTiralTypeNum = ""
/ soundCalibrationTextYPos = ""
/ currentOutcome = ""
/ pitInstructionIndex = ""
/ pavQuizType = ""
/ thisBlockCorrectQuizzes = ""
/ pavQuizzesInARowCorrect = ""
/ pavQuizResponse = ""
/ pavTrialNum = ""
/ pitTrialTypeNum = ""
/ pitTrialType = ""
/ responseKeyPressed = ""
/ RTFromScriptStart = ""
/ RTfromTrialStart = ""
/ tempFractalSide = ""
/ fractalXPos1 = 50%
/ fractalXPos2 = 50%
/ fractalXPos3 = 50%
/ socialXPos1 = 50%
/ socialXPos2 = 50%
/ socialXPos3 = 50%
/ tempSocialSide = ""
/ pavQuizYPos = 66%
/ alarmTurnedOffYPos = 52.5%
/ pavTrialHumanSide = ""
/ pitCueAssociatedButton = ""
/ pitResponseSide = ""
/ pitResponseRichOption = ""
/ chooseSound = ""
/ sound3rdAversive = ""
/ leftButtonAversiveSound = ""
/ rightButtonAversiveSound = ""
/ soundAversivenessRating = ""
/ soundArousalRating = ""
/ physioMarkerinstLeftStimuli = ""
/ physioMarkerinstRightStimuli = ""
</values>

**************************************************************************************************************
Output data file columns
**************************************************************************************************************
<data>
/ audit = true
/ columns = (build, parameters.lastScriptUpdated, values.experimentName, subject, group, session,parameters.rightButtonBox, parameters.leftButtonBox, script.startdate, script.starttime,	
values.phaseName, script.currenttime, values.trialStartTime, values.trialEndTime, values.trialDur, values.RTFromScriptStart, values.RTfromTrialStart,
trialcode, values.instruBlockNum, values.instruTrialNum, values.chooseAversiveOutcome, values.chooseFractalStimuli, values.chooseSocialStimuli, 
values.chooseSound, values.soundAversivenessRating, values.soundArousalRating,
values.sound3rdAversive, values.leftButtonAversiveSound, values.rightButtonAversiveSound,
values.instRightAversiveOutcome, values.instLeftAversiveOutcome, values.noInstResponseOutcome, values.richInstOption, values.poorInstOption, 
trial.instruQuiz.response, values.responseKeyPressed, values.currentOutcome, values.socialXPos, values.fractalXPos,
values.instruQuizTrialNum, values.instruQuizResponse, values.thisBlockCorrectQuizzes, values.numBlockQuizzesPassedTotal, values.numBlockQuizzesPassedInARow, 
values.typeOfAlert, values.socialXPos1, values.socialXPos2, values.socialXPos3, values.fractalXPos1, values.fractalXPos2, values.fractalXPos3,
trial.pavQuizSocial.response, values.pavQuizResponse, values.pavQuizOutcomeType, values.pavQuizCorrectAnswer, values.pavQuizAnswerGiven, values.pavQuizIsCorrect, values.numPavBlockCorrectQuiz,
values.pitTrialNum, values.pitTrialTypeNum, values.pitTrialType, values.rightSocialTrialNum, values.leftSocialTrialNum, values.rightFractalTrialNum, values.leftFractalTrialNum, 
values.safeSocialTrialNum, values.safeFractalTrialNum, values.noPavCueTrialNum, values.pitCueAssociatedButton, values.pitResponseSide, values.pitResponseRichOption,
values.rightInstButtonRelatedHuman, values.leftInstButtonRelatedHuman, values.rightInstButtonRelatedFractal, values.leftInstButtonRelatedFractal, values.pavOnlyHuman
)
</data> 

**************************************************************************************************************
Defining background 
**************************************************************************************************************
<defaults>
/ fontstyle = ("Arial", 3.5%, false, false, false, false, 5, 1)
/ screencolor = (26, 26, 26)   // 10% dark gray
/ txbgcolor = (26, 26, 26)     // 10% dark gray
/ txcolor = white			   // text color is white
/ minimumversion = "6.1.0.0"
/ canvassize = (100%, 100%)
/ canvasaspectratio = (4, 3) 
// inputdevice = XID
/ inputdevice = keyboard
</defaults>

**************************************************************************************************************
Creating stimuli 
**************************************************************************************************************
<picture socialStimuli>
/ items = ("stimuli/social/human_image_1.png", "stimuli/social/human_image_2.png",
"stimuli/social/human_image_3.png")
/ position = (values.socialXPos, values.socialYPos)
/ size = (values.socialStimuliSize, values.socialStimuliSize)
/ select = values.chooseSocialStimuli
/ erase = false
</picture>

<picture socialStimuli1>
/ items = ("stimuli/social/human_image_1_pavquiz.png")
/ position = (values.socialXPos1, values.pavQuizYPos)
/ size = (values.socialStimuliSize_pavQuiz, values.socialStimuliSize_pavQuiz)
/ erase = false
</picture>

<picture socialStimuli2>
/ items = ("stimuli/social/human_image_2_pavquiz.png")
/ position = (values.socialXPos2, values.pavQuizYPos)
/ size = (values.socialStimuliSize_pavQuiz, values.socialStimuliSize_pavQuiz)
/ erase = false
</picture>

<picture socialStimuli3>
/ items = ("stimuli/social/human_image_3_pavquiz.png")
/ position = (values.socialXPos3, values.pavQuizYPos)
/ size = (values.socialStimuliSize_pavQuiz, values.socialStimuliSize_pavQuiz)
/ erase = false
</picture>

<picture aversiveOutcomeStimuli>
/ items = ("stimuli/inst_aversive/inst_aversive_image_1.png", "stimuli/inst_aversive/inst_aversive_image_2.png",
"stimuli/inst_aversive/inst_aversive_image_3.png")
/ position = (values.aversiveOutcomeXPos, values.aversiveOutcomeYPos)
/ size = (values.aversiveOutcomeSize, values.aversiveOutcomeSize)
/ select = values.chooseAversiveOutcome
/ erase = false
</picture>

<list chooseInstOutcome>
/ items = (1, 2, 3)
/ selectionmode = random
/ replace = false
/ selectionrate = always
</list>


<picture fractalStimuli>
/ items = ("stimuli/fractals/fractal_image_1.png", "stimuli/fractals/fractal_image_2.png",
"stimuli/fractals/fractal_image_3.png")
/ position = (values.fractalXPos, values.fractalYPos)
/ size = (values.fractalStimuliSize, values.fractalStimuliSize)
/ select = values.chooseFractalStimuli
/ erase = false
</picture>

<picture fractalStimuli1>
/ items = ("stimuli/fractals/fractal_image_1_pavquiz.png")
/ position = (values.fractalXPos1, values.pavQuizYPos)
/ size = (values.fractalStimuliSize_pavQuiz, values.fractalStimuliSize_pavQuiz)
/ erase = false
</picture>

<picture fractalStimuli2>
/ items = ("stimuli/fractals/fractal_image_2_pavquiz.png")
/ position = (values.fractalXPos2, values.pavQuizYPos)
/ size = (values.fractalStimuliSize_pavQuiz, values.fractalStimuliSize_pavQuiz)
/ erase = false
</picture>

<picture fractalStimuli3>
/ items = ("stimuli/fractals/fractal_image_3_pavquiz.png")
/ position = (values.fractalXPos3, values.pavQuizYPos)
/ size = (values.fractalStimuliSize_pavQuiz, values.fractalStimuliSize_pavQuiz)
/ erase = false
</picture>


<picture alarmTurnedOff>
/ items = ("stimuli/alarm_turned_off.png")
/ position = (50%, values.alarmTurnedOffYPos)
/ size = (65%, 65%)
/ erase = false
</picture>

<picture controlPanel>
/ items = ("stimuli/control_panel.png")
/ position = (50%, 50%)
/ size = (75%, 75%)
/ erase = false
</picture>

<picture pavQuizBackPanel>
/ items = ("stimuli/pav_quiz_back_panel.png")
/ position = (50%, 90%)
/ size = (100%, 110%)
/ erase = false
</picture>

<picture leverBothUpright>
/ items = ("stimuli/lever_both_upright.png")
/ position = (50%, 50%)
/ size = (75%, 75%)
/ erase = false
</picture>

<picture leverLeftDown>
/ items = ("stimuli/lever_left_down.png")
/ position = (50%, 50%)
/ size = (75%, 75%)
/ erase = false
</picture>

<picture leverRightDown>
/ items = ("stimuli/lever_right_down.png")
/ position = (50%, 50%)
/ size = (75%, 75%)
/ erase = false
</picture>

<picture playButton>
/ items = ("stimuli/misc/play-button.png")
/ position = (50%, 74%)
/ size = (21%, 21%)
/ erase = false
</picture>

<picture nextButton>
/ items = ("stimuli/misc/next-button.png")
/ position = (83%, 78%)
/ size = (15%, 15%)
</picture>

<picture yLetter>
/ items = ("stimuli/misc/Y-letter.png")
/ position = (20%, 70%)
/ size = (15%, 15%)
</picture>

<picture nLetter>
/ items = ("stimuli/misc/N-letter.png")
/ position = (80%, 70%)
/ size = (15%, 15%)
</picture>

<sound testSound>
/ items = ("stimuli/sound/test_sound.wav")
/ pan = 0
</sound>

<picture fixation> 
/ items = ("stimuli/misc/fixation.png")
/ position = (50%, 50%)
/ size = (6%, 6%)
/ erase = false
</picture>


**************************************************************************************************************
Sound calibration procedure
**************************************************************************************************************
<item soundCalibrationText>
/ 1 = "We will perform a sound calibration.
~nPlease look at the small black speaker located to the right of the keyboard.
Please make sure that you can reach the speaker knob to change the volume.
~nTo hear the sound use your mouse to press the play button below."
/ 2 = "Did you hear the sound? 
~n~nPress 'Y' for Yes and 'N' for No using your mouse."
/ 3 = "Please make sure the speakers are ON.
~nTry increasing your volume and listening for the sound again."
/ 4 = "This test will abort due to speaker issues.
~n~nPlease let the experimenter know the issue.
~n~n~n~n~n~n~nThis script will abort in 10s."
/ 5 = "Decrease or Increase your speaker volume based on the prompts shown on the next screen.
~nClick the play button with your mouse to listen to the sound. You can listen to the sound multiple times by pressing this button.
~nClick the next arrow sign on the lower right side of the screen when you are done."
/ 6 = "Now that you know the range of volume on your speaker, click the play button with your mouse to listen to the sound again.
~nCrank up the speaker till the loudness is at a 9 out of 10 where 10 is the highest volume that you had set previously.
~nClick the next arrow sign when you are done."
</item>

<text soundCalibrationText>
/ items = soundCalibrationText
/ fontstyle = ("Arial", 3.8%, false, false, false, false, 5, 1)
/ position = (50%, 40%)
/ size = (85%, 47%) //35%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.soundCalibrationTextIndex
</text>

<trial speakerOn>
/ ontrialbegin = [
	values.introTextYPos = 40%;
	values.soundCalibrationTextIndex = 1;
	values.speakerOnTestNum = values.speakerOnTestNum + 1;
]
/ stimulustimes = [0 = clearscreen, soundCalibrationText, playButton]
/ inputdevice = mouse
/ validresponse = (playButton)
/ timeout = 120000
/ responsemessage = (playButton, testSound, 3000)
/ responsemessage = (playButton, playButton, 3000)
/ responsemessage = (playButton, soundCalibrationText, 3000)
/ recorddata = true
/ responseinterrupt = trial
/ branch = [
	trial.speakerTest;
]
</trial>

<trial speakerTest>
/ ontrialbegin = [
	values.soundCalibrationTextIndex = 2;
]
/ stimulustimes = [0 = clearscreen, soundCalibrationText, yLetter, nLetter]
// correctresponse = (parameters.yesButtonBox, parameters.noButtonBox)
/ inputdevice = mouse
/ validresponse = (yLetter, nLetter)
/ responsetrial = (nLetter, repeatSoundTest_inbetweenTrial)
/ recorddata = true
// branch = [
//	if (trial.speakerTest.response == parameters.noButtonBox){
//		if (values.numSoundRepeated == 2){
//			trial.speakerNotWorking;
//		} else {
//			trial.repeatSoundTest;
//		}
//	}
//]
</trial>

<trial repeatSoundTest_inbetweenTrial>
/ stimulustimes = [0 = clearscreen]
/ trialduration = 1
/ recorddata = false
/ branch = [
	if (values.numSoundRepeated == 2) {
		trial.speakerNotWorking;
	} else {
		trial.repeatSoundTest;
	}
]
</trial>

<trial repeatSoundTest>
/ ontrialbegin = [
	values.numSoundRepeated = values.numSoundRepeated + 1;
	values.soundCalibrationTextIndex = 3;
]
/ stimulustimes = [0 = clearscreen, soundCalibrationText, spaceBarContinueInstructions]
/ correctresponse = (parameters.spaceButtonBox)
/ recorddata = true
/ branch = [
	trial.speakerOn;
]
</trial>

<trial speakerNotWorking>
/ ontrialbegin = [
	values.soundCalibrationTextIndex = 4;
]
/ stimulustimes = [0 = soundCalibrationText]
/ validresponse = (noresponse)
/ correctresponse = (noresponse)
/ recorddata = true
/ trialduration = 10000
/ ontrialend = [
	script.abort();
]
</trial>

<item soundCalibrationText2>
/ 1 = "Increase the volume to a level which makes you very irritated and makes you want to stop the experiment right away.
~nYou can listen to the sound multiple times by pressing the play button with your mouse.
~nClick the next arrow sign when you are done."
/ 2 = "Decrease the volume to a level where you can barely hear the sound.
~nClick the next arrow sign when you are done."
/ 3 = "Set the volume to a level which feel comfortable, not too loud nor too low.
~nClick the next arrow sign when you are done."
</item>

<text soundCalibrationText2>
/ items = soundCalibrationText2
/ fontstyle = ("Arial", 3.8%, false, false, false, false, 5, 1)
/ position = (50%, 37%)
/ size = (85%, 30%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.soundCalibrationTextIndex2
/ erase = false
</text>

<text spaceBarContinueInstructions>
/ items = ("Press the center button on the box to continue.")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
/ size = (80%, 5%)
/ vjustify = center
/ valign = center
/ halign = center
</text>


<text spaceBarEndInstructions>
/ items = ("Press the center button on the box to end the task.")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
/ size = (80%, 5%)
/ vjustify = center
/ valign = center
/ halign = center
</text>


<trial soundCalibrationFirst>
/ ontrialbegin = [
	values.soundCalibrationTextIndex = 5;
]
/ stimulustimes = [0 = soundCalibrationText, spaceBarContinueInstructions]
/ validresponse = (parameters.spaceButtonBox)
/ correctresponse = (parameters.spaceButtonBox)
/ recorddata = true
</trial>

<trial soundCalibration>
/ ontrialbegin = [
	values.soundCalibrationTextIndex2 = values.soundCalibrationTextIndex2 + 1;
	values.soundCalibrationTextYPos = values.soundCalibrationTextYPos + 30%;
]
/ stimulustimes = [0 = soundCalibrationText2, playButton, nextButton]
/ inputdevice = mouse
/ validresponse = (playButton, nextButton)
/ responsemessage = (playButton, soundCalibrationText2, 3000)
/ responsemessage = (playButton, playButton, 3000)
/ responsemessage = (playButton, testSound, 3000)
/ recorddata = true
/ branch = [
	if (trial.soundCalibration.response == "playButton") {
		return trial.soundCalibrationContinued;
	}
]
</trial>

<trial soundCalibrationContinued>
/ stimulustimes = [0 = soundCalibrationText2, playButton, nextButton]
/ inputdevice = mouse
/ validresponse = (playButton, nextButton)
/ responsemessage = (playButton, soundCalibrationText2, 3000)
/ responsemessage = (playButton, playButton, 3000)
/ responsemessage = (playButton, testSound, 3000)
/ recorddata = true
/ branch = [
	if (trial.soundCalibrationContinued.response == "playButton")
		trial.soundCalibrationContinued;
]
</trial>

<trial setSpeakervolume>
/ ontrialbegin = [
	values.soundCalibrationTextIndex = 6;
]
/ stimulustimes = [0 = soundCalibrationText, playButton, nextButton]
/ inputdevice = mouse
/ validresponse = (playButton, nextButton)
/ responsemessage = (playButton, soundCalibrationText, 3000)
/ responsemessage = (playButton, playButton, 3000)
/ responsemessage = (playButton, testSound, 3000)
/ recorddata = true
/ branch = [
	if (trial.setSpeakervolume.response == "playButton") {
		return trial.setSpeakervolumeContinued;
	}
]
</trial>

<trial setSpeakervolumeContinued>
/ stimulustimes = [0 = soundCalibrationText, playButton, nextButton]
/ inputdevice = mouse
/ validresponse = (playButton, nextButton)
/ responsemessage = (playButton, soundCalibrationText, 3000)
/ responsemessage = (playButton, playButton, 3000)
/ responsemessage = (playButton, testSound, 3000)
/ recorddata = true
/ branch = [
	if (trial.setSpeakervolumeContinued.response == "playButton")
		trial.setSpeakervolumeContinued;
]
</trial>

<text soundCalibrationFinish>
/ items = ("Sound calibration completed. 
~n~nWe will now start the game.")
/ fontstyle = ("Arial", 3.8%, false, false, false, false, 5, 1)
/ position = (50%, 37%)
/ size = (85%, 30%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial soundCalibrationFinish>
/ stimulustimes = [0 = clearscreen, soundCalibrationFinish, spaceBarContinueInstructions]
/ validresponse = (parameters.spaceButtonBox)
/ correctresponse = (parameters.spaceButtonBox)
/ recorddata = true
</trial>

<block experimentSetup>
/ ontrialbegin = [
	values.soundCalibrationTextYPos = 20%;
]
/ trials = [
	1 = speakerOn;
	2 = soundCalibrationFirst;
	3-5 = soundCalibration;
	6 = setSpeakervolume;
	7 = soundCalibrationFinish;
]
/ datastreams = (eyetracker)
/ recorddata = true
</block>


**************************************************************************************************************
Finding aversive sounds for the task
**************************************************************************************************************

<sound allTestSounds>
/ items = ("stimuli/sound/test_aversive_sounds/115-trimmed.wav", "stimuli/sound/test_aversive_sounds/380-trimmed.wav", "stimuli/sound/test_aversive_sounds/420-trimmed.wav", "stimuli/sound/test_aversive_sounds/624-trimmed.wav",
"stimuli/sound/test_aversive_sounds/714-trimmed.wav", "stimuli/sound/test_aversive_sounds/719-trimmed.wav", "stimuli/sound/test_aversive_sounds/730-trimmed.wav", "stimuli/sound/test_aversive_sounds/910-trimmed.wav")
/ pan = 0
/ erase = false
/ select = values.chooseSound
</sound>

<list chooseTestSound>
/ items = (1,2,3,4,5,6,7,8)
/ selectionrate = always
/ selectionmode = random
/ replace = false
/ poolsize = 8
</list>

<slider soundAversivenessQuestion>
/ range = (1, 5)
/ increment = 1
/ labels = ("1", "2", "3", "4", "5")
/ showticks = true
/ slidersize = (70%, 20%)
/ position = (5%, 15%)
/ caption = "Use the mouse to choose the level of aversiveness of this sound ~nbetween 1 (lowest) and 5 (highest):"
</slider>

<slider soundArousalQuestion>
/ range = (1, 5)
/ increment = 1
/ labels = ("1", "2", "3", "4", "5")
/ showticks = true
/ slidersize = (70%, 20%)
/ position = (5%, 50%)
/ caption = "Use the mouse to choose the level of arousal induced by this sound ~nbetween 1 (lowest) and 5 (highest):"
</slider>


<list testSoundsSeq>
/ items = ()
</list>

<list testSoundsAversivenessRating1>
/ items = ()
/ selectionrate = always
/ selectionmode = random
</list>
<list testSoundsAversivenessRating2>
/ items = ()
/ selectionrate = always
/ selectionmode = random
</list>
<list testSoundsAversivenessRating3>
/ items = ()
/ selectionrate = always
/ selectionmode = random
</list>
<list testSoundsAversivenessRating4>
/ items = ()
/ selectionrate = always
/ selectionmode = random
</list>
<list testSoundsAversivenessRating5>
/ items = ()
/ selectionrate = always
/ selectionmode = random
</list>

<list testSoundsArousalRating>
/ items = ()
</list>


<surveypage soundsRating>
/ ontrialbegin = [
	values.chooseSound = list.chooseTestSound.nextvalue;
	list.testSoundsSeq.appenditem(values.chooseSound);

]
/ showquestionnumbers = false
/ showpagenumbers = false
/ questions = [1 = soundAversivenessQuestion, soundArousalQuestion]
/ stimulustimes = [0 = allTestSounds]
/ nextButtonPosition = (90%, 90%)
/ ontrialend = [
	values.soundAversivenessRating = slider.soundAversivenessQuestion.response;
	values.soundArousalRating = slider.soundArousalQuestion.response;
	if (values.soundAversivenessRating == 1){
		list.testSoundsAversivenessRating1.appenditem(values.chooseSound);
	} else if (values.soundAversivenessRating == 2){
		list.testSoundsAversivenessRating2.appenditem(values.chooseSound);
	} else if (values.soundAversivenessRating == 3){
		list.testSoundsAversivenessRating3.appenditem(values.chooseSound);
	} else if (values.soundAversivenessRating == 4){
		list.testSoundsAversivenessRating4.appenditem(values.chooseSound);
	} else if (values.soundAversivenessRating == 5){
		list.testSoundsAversivenessRating5.appenditem(values.chooseSound);
	}
	list.testSoundsArousalRating.appenditem(values.soundArousalRating);
]
</surveypage>


<block soundsRating>
/ onblockbegin = [
	values.phaseName = "soundRating";
]
/ trials = [
	1-8 = soundsRating;
]
/ onblockend = [
	if (list.testSoundsAversivenessRating5.itemcount >= 3){ // choose these 3 to be the 3 sounds
		values.sound3rdAversive = list.testSoundsAversivenessRating5.nextvalue;
		values.leftButtonAversiveSound = list.testSoundsAversivenessRating5.nextvalue;
		values.rightButtonAversiveSound = list.testSoundsAversivenessRating5.nextvalue;
	} else if (list.testSoundsAversivenessRating5.itemcount == 1 || list.testSoundsAversivenessRating5.itemcount == 2){ // choose the 5 rating one to be the 3rd aversive sound
		values.sound3rdAversive = list.testSoundsAversivenessRating5.nextvalue;
		if (list.testSoundsAversivenessRating4.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating4.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating4.nextvalue;
		} else if (list.testSoundsAversivenessRating3.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
		} else if (list.testSoundsAversivenessRating2.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
		} else if (list.testSoundsAversivenessRating1.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
		}
	}
	
	// if 5 rating is empty
	if (list.testSoundsAversivenessRating4.itemcount >= 3){ // choose these 3 to be the 3 sounds
		values.sound3rdAversive = list.testSoundsAversivenessRating4.nextvalue;
		values.leftButtonAversiveSound = list.testSoundsAversivenessRating4.nextvalue;
		values.rightButtonAversiveSound = list.testSoundsAversivenessRating4.nextvalue;
	} else if (list.testSoundsAversivenessRating4.itemcount == 1 || list.testSoundsAversivenessRating4.itemcount == 2){ // choose the 5 rating one to be the 3rd aversive sound
		values.sound3rdAversive = list.testSoundsAversivenessRating4.nextvalue;
		if (list.testSoundsAversivenessRating3.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
		} else if (list.testSoundsAversivenessRating2.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
		} else if (list.testSoundsAversivenessRating1.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
		}
	}
	
	// if 4 rating is empty
	if (list.testSoundsAversivenessRating3.itemcount >= 3){ // choose these 3 to be the 3 sounds
		values.sound3rdAversive = list.testSoundsAversivenessRating3.nextvalue;
		values.leftButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
		values.rightButtonAversiveSound = list.testSoundsAversivenessRating3.nextvalue;
	} else if (list.testSoundsAversivenessRating3.itemcount == 1 || list.testSoundsAversivenessRating3.itemcount == 2){ // choose the 5 rating one to be the 3rd aversive sound
		values.sound3rdAversive = list.testSoundsAversivenessRating3.nextvalue;
		if (list.testSoundsAversivenessRating2.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
		} else if (list.testSoundsAversivenessRating1.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
		}
	}
	
	// if 3 rating is empty
	if (list.testSoundsAversivenessRating2.itemcount >= 3){ // choose these 3 to be the 3 sounds
		values.sound3rdAversive = list.testSoundsAversivenessRating2.nextvalue;
		values.leftButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
		values.rightButtonAversiveSound = list.testSoundsAversivenessRating2.nextvalue;
	} else if (list.testSoundsAversivenessRating2.itemcount == 1 || list.testSoundsAversivenessRating2.itemcount == 2){ // choose the 5 rating one to be the 3rd aversive sound
		values.sound3rdAversive = list.testSoundsAversivenessRating2.nextvalue;
		if (list.testSoundsAversivenessRating1.itemcount >= 2){
			values.leftButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
			values.rightButtonAversiveSound = list.testSoundsAversivenessRating1.nextvalue;
		}
	}
]
</block>


**************************************************************************************************************
Instructions for explanation of experiment
**************************************************************************************************************
<item introInstructions>
/ 1 = "Welcome to the Alarm Control Simulation!
~n~n~nYou are a technician responsible for monitoring and managing a highly sensitive alarm system in a secure facility."
/ 2 = "Your job is to minimize system malfunctions by responding to visual signals and colleague alerts that may indicate the potential activation of disruptive alarms (e.g., loud noises and visual alerts). 
~n~nStay focused!"
</item>

<text introInstructions>
/ items = introInstructions
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, values.introTextYPos)
/ size = (80%, 80%) // (values.introTextSize, 80%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.instructionIndex
</text>

<trial introInstructions>
/ ontrialbegin = [
	values.trialStartTime = script.elapsedtime;
	values.instructionIndex = values.instructionIndex + 1;
]
/ stimulustimes = [0 = introInstructions, spaceBarContinueInstructions]
/ beginresponsetime = 200
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
	trial.introInstructions.resetstimulusframes();
]
</trial>

<block introInstructions>
/ onblockbegin = [
	values.phaseName = "introInstructions";
	values.instructionIndex = 0;
	values.introTextYPos = 45%;
]
/ trials = [
	1-2 = introInstructions;
]
/ datastreams = (eyetracker)
/ recorddata = true
</block>



**************************************************************************************************************
Instrumental phase instructions
**************************************************************************************************************
<item instInstructions>
/ 1 = "In this phase, your role is to interact with the control panel to prevent system alarms from being triggered."
/ 2 = "On each trial, a control panel will appear on the top of the screen with two levers on the bottom. There are two types of system alerts that will be activated if you are unable to stop it from activating. Each lever is associated with avoiding one type of system alert. You must choose between the left and right levers by pressing the “L” or “R” button on the button box, respectively."
/ 3 = "Make your selection as quickly as possible to ensure smooth system operations. If you fail to respond in time, a high-priority alarm will go off.
~n~nYour choices influence whether an alarm goes off. Some levers are more effective than others at preventing system alerts."
/ 4 = "After each choice, you’ll see whether the alarm was successfully avoided (“Alarm turned off”) or triggered (a warning image and loud noise). Pay attention and try to learn which lever is more effective at preventing which alarms." 
/ 5 = "If you stop choosing a lever for several trials, its chance of successfully preventing an alarm may improve—so consider varying your responses strategically."
/ 6 = "After each block of trials, you will answer a few questions to test your understanding of how the system works. You’ll continue playing blocks until you've demonstrated you understand the pattern of outcomes."
</item>

<text instInstructions>
/ items = instInstructions
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.instInstructionIndex
</text>

<trial instInstructions>
/ ontrialbegin = [
	values.trialStartTime = script.elapsedtime;
	values.instInstructionIndex = values.instInstructionIndex + 1;
]
/ beginresponsetime = 200
/ stimulustimes = [0 = clearscreen, instInstructions, spaceBarContinueInstructions]
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>

<block instPhaseInstructions>
/ onblockbegin = [
	values.phaseName = "instruInstructions";
	values.pavInstructionIndex = 0;
	values.pavSetupTrialsCounter = 0;
]
/ trials = [
	1-6 = instInstructions;
	7 = sendInstruBeginPhysio;
]
/ datastreams = (eyetracker)
/ recorddata = true

</block>

**************************************************************************************************************
Instrumental phase 
**************************************************************************************************************
<list buttonOptions>
/ items = ("l", "r")
/ selectionmode = random
/ replace = false
/ selectionrate = always
</list>

<trial sendInstruBeginPhysio> // sent at the end of instrumental instructions
/ ontrialbegin = [
	values.instRightAversiveOutcome = list.chooseInstOutcome.nextvalue;
	values.instLeftAversiveOutcome = list.chooseInstOutcome.nextvalue;
	values.noInstResponseOutcome = list.chooseInstOutcome.nextvalue;
	values.richInstOption = list.buttonOptions.nextvalue;
	values.poorInstOption = list.buttonOptions.nextvalue;
	values.numBlockQuizzesPassedTotal = 0;
	values.numBlockQuizzesPassedInARow = 0;
]
/ stimulustimes = [0 = instruPhaseBeginPhysio; 998 = clearscreen]
/ trialduration = 1000
/ response = noresponse
/ recorddata = false
/ screencapture = false
</trial>

<trial sendInstruBlockBeginPhysio> // sent at the begining of every instrumental block
/ ontrialbegin = [
	values.instruBlockNum = values.instruBlockNum + 1;
	values.instruTrialNum = 0;
	values.instruQuizTrialNum = 0;
	values.thisBlockCorrectQuizzes = 0;
	values.instruQuizResponse = "";
	values.currentOutcome = "";
	// should be 2 for the participant to pass that block's quiz
]
/ stimulustimes = [0 = instruBlockBeginPhysio; 998 = clearscreen]
/ trialduration = 1000
/ response = noresponse
/ recorddata = false
/ screencapture = false
</trial>


<expressions>
/ instruITIdur = rand(parameters.instruITImin, parameters.instruITImax)
</expressions>

<trial instruITI_start>
/ ontrialbegin = [
	values.chooseSound = "";
	values.instruTrialNum += 1;
	values.trialStartTime = trial.instruITI_start.timestamp;
	values.markerETtrialID = 201;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.instruTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 101);
	values.markerETDisplayOn = 3010;
	values.markerETdisplayOff = 5010;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
]
/ stimulustimes = [0 = clearscreen, controlPanel, portETtrialID; 1 = portETdisplayOn] 
/ response = noresponse
/ trialduration = expressions.instruITIdur -2
/ screencapture = false
/ recorddata = false
/ branch = [
	return trial.instruITI;
]
</trial>

<trial instruITI>
/ stimulustimes = [0 = controlPanel, portETdisplayOff; 1 = portETtrialEnd]
/ trialduration = 2
/ screencapture = true
/ response = noresponse
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
/ branch = [
	return trial.instruResponse;
]
</trial>

<trial instruResponse>
/ ontrialbegin = [
	values.chooseSound = "";
	values.trialStartTime = trial.instruResponse.timestamp;
	values.markerETtrialID = 201;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.instruTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 101);
	values.markerETDisplayOn = 3010;
	values.markerETdisplayOff = 5010;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	values.physioMarkerinstLeftStimuli = "";
	values.physioMarkerinstRightStimuli = "";
]
/ stimulustimes = [0 = controlPanel, leverBothUpright, portETtrialID; 1 = portETdisplayOn; 1498 = portETdisplayOff; 1499 = portETtrialEnd] 
/ beginresponsetime = 0
/ responseinterrupt = immediate // if a response is made, this will not send out portRTdisplayOff and portETtrialEnd. These will be sent in the leftStimuliChosen/rightStimuliChosen trial
/ validresponse = (parameters.leftButtonBox, parameters.rightButtonBox)
/ responsemessage = (parameters.leftButtonBox, portETbuttonPressLeft, 1)
/ responsemessage = (parameters.leftButtonBox, leftStimuliChosenPhysio, 200)
/ responsemessage = (parameters.rightButtonBox, portETbuttonPressRight, 1)
/ responsemessage = (parameters.rightButtonBox, rightStimuliChosenPhysio, 200)
/ isvalidresponse = [
	if (trial.instruResponse.response == parameters.leftButtonBox) {
		values.responseKeyPressed = "left";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.instruResponse.elapsedtime;
		true;
	} else if (trial.instruResponse.response == parameters.rightButtonBox) {
		values.responseKeyPressed = "right";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.instruResponse.elapsedtime;	
		true;
	};
]
/ timeout = parameters.instruResponseMaxTime -1 
/ screencapture = true
/ recorddata = true
/ responseinterrupt = immediate
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
/ branch = [
	return trial.instruFeedback;
]
</trial>

<list probRichOption> // rich option has 70% probability of preventing the aversive outcome
/ items = (0, -1) 
/ itemprobabilities = (0.7, 0.3)
/ poolsize = 50
/ selectionmode = random
/ replace = true
/ selectionrate = always
</list>

<list probPoorOption> // poor option has 30% probability of preventing the aversive outcome
/ items = (-1, 0) 
/ itemprobabilities = (0.7, 0.3)
/ poolsize = 50
/ selectionmode = random
/ replace = true
/ selectionrate = always
</list>

<trial instruFeedback>
/ ontrialbegin = [
	values.responseKeyPressed = "";
	values.trialStartTime = trial.instruFeedback.timestamp;
	values.markerETtrialID = 201;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.instruTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 101);
	values.markerETDisplayOn = 3010;
	values.markerETdisplayOff = 5010;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	if (trial.instruResponse.response == parameters.leftButtonBox) {
		trial.instruFeedback.insertStimulustime(picture.leverLeftDown, 0);
		// choosing if we should provide the aversive or alarm turned off outcome
		if (values.richInstOption == "l") {
			// if left button is the rich instrumental option
			// rich option means that left button prevents the aversive outcome O1 with a 70% probability.
			values.currentOutcome = list.probRichOption.nextvalue;
			// 0 means alarm turned off outcome; -1 means aversive outcome
		} else if (values.poorInstOption == "l") {
			// if left button is the poor instrumental option
			values.currentOutcome = list.probPoorOption.nextvalue;
		}
		if (values.currentOutcome == -1) {
			values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
			values.chooseSound = values.leftButtonAversiveSound;
			trial.instruFeedback.insertstimulustime(sound.allTestSounds, 0);
			trial.instruFeedback.insertstimulustime(picture.aversiveOutcomeStimuli, 0);
		} else {
			values.chooseAversiveOutcome = 0;
			values.chooseSound = "";
			trial.instruFeedback.insertstimulustime(picture.alarmTurnedOff, 0);
		}
	} else if (trial.instruResponse.response == parameters.rightButtonBox) {
		trial.instruFeedback.insertStimulustime(picture.leverRightDown, 0);
		// choosing if we should provide the aversive or alarm turned off outcome
		if (values.richInstOption == "r") {
			// if left button is the rich instrumental option
			// rich option means that left button prevents the aversive outcome O1 with a 70% probability.
			values.currentOutcome = list.probRichOption.nextvalue;
			// 0 means alarm turned off outcome; -1 means aversive outcome
		} else if (values.poorInstOption == "r") {
			// if left button is the poor instrumental option
			values.currentOutcome = list.probPoorOption.nextvalue;
		}
		if (values.currentOutcome == -1) {
			values.chooseAversiveOutcome = values.instRightAversiveOutcome;
			values.chooseSound = values.rightButtonAversiveSound;
			trial.instruFeedback.insertstimulustime(sound.allTestSounds, 0);
			trial.instruFeedback.insertstimulustime(picture.aversiveOutcomeStimuli, 0);
		} else {
			values.chooseAversiveOutcome = 0;
			values.chooseSound = "";
			trial.instruFeedback.insertstimulustime(picture.alarmTurnedOff, 0);
		}
	} else {
		// if no button is pressed, the participants receive a 3rd aversive noise
		trial.instruFeedback.insertStimulusTime(picture.leverBothUpright, 0);
		values.chooseSound = values.sound3rdAversive;
		trial.instruFeedback.insertStimulusTime(sound.allTestSounds, 0);
	}
]
/ stimulustimes = [0 = clearscreen, controlPanel, portETtrialID; 1 = portETdisplayOn; 997 = portETdisplayOff; 998 = portETtrialEnd] 
/ response = noresponse
/ trialduration = parameters.instruFeedbackDur -1
/ screencapture = true
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
	trial.instruFeedback.clearstimulusframes();
]
</trial>


<text instruQuizQuestion>
/ items = ("Which button prevented this outcome?")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 30%)
/ size = (80%, 5%)
</text>

<text instruQuizInstructions>
/ items = ("Press 'L' or 'R' key")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
</text>

<list instruQuizOutcomeNum>
/ items = (values.instRightAversiveOutcome, values.instLeftAversiveOutcome)
/ poolsize = 2
/ replace = false
/ selectionmode = random
/ selectionrate = always
</list>

<trial instruQuiz>
/ ontrialbegin = [
	values.trialStartTime = trial.instruQuiz.timestamp;
	values.markerETtrialID = 201;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.instruTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 301);
	values.markerETDisplayOn = 3030;
	values.markerETdisplayOff = 5030;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	values.chooseAversiveOutcome = list.instruQuizOutcomeNum.nextvalue;
	if (values.chooseAversiveOutcome == values.instRightAversiveOutcome){
		values.chooseSound = values.rightButtonAversiveSound;
	} else if (values.chooseAversiveOutcome == values.instLeftAversiveOutcome){
		values.chooseSound = values.leftButtonAversiveSound;
	}
	values.instruQuizTrialNum = values.instruQuizTrialNum + 1;
]
/ stimulustimes = [0 = clearscreen, aversiveOutcomeStimuli, allTestSounds, instruQuizQuestion, instruQuizInstructions, portETtrialID; 1 = portETdisplayOn]
/ validresponse = (parameters.leftButtonBox, parameters.rightButtonBox)
// correctresponse = (parameters.leftButtonBox, parameters.rightButtonBox)
/ isvalidresponse = [
	if (trial.instruQuiz.response == parameters.leftButtonBox) {
		values.responseKeyPressed = "left";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.instruQuiz.elapsedtime;
		true;
	} else if (trial.instruQuiz.response == parameters.rightButtonBox) {
		values.responseKeyPressed = "right";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.instruQuiz.elapsedtime;	
		true;
	} else {
	}
]
/ recorddata = true
/ screencapture = true
/ responseinterrupt = immediate
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
	if (values.chooseAversiveOutcome == values.instRightAversiveOutcome) {
		if (trial.instruQuiz.response == parameters.rightButtonBox) {
			values.instruQuizResponse = "correct";
			values.thisBlockCorrectQuizzes = values.thisBlockCorrectQuizzes + 1;
		} else if (trial.instruQuiz.response == parameters.leftButtonBox) {
			values.instruQuizResponse = "incorrect";
		}
	} else if (values.chooseAversiveOutcome == values.instLeftAversiveOutcome) {
		if (trial.instruQuiz.response == parameters.leftButtonBox) {
			values.instruQuizResponse = "correct";
			values.thisBlockCorrectQuizzes = values.thisBlockCorrectQuizzes + 1;
		} else if (trial.instruQuiz.response == parameters.rightButtonBox) {
			values.instruQuizResponse = "incorrect";
		}
	}
]
/ branch = [
	return trial.instruQuizEnd;
]
</trial>

<trial instruQuizEnd>
/ stimulustimes = [0 = portETdisplayOff; 1 = portETtrialEnd]
/ trialduration = 2
/ recorddata = false
/ screencapture = false
/ ontrialend = [
	if (values.instruQuizTrialNum == 2 && values.thisBlockCorrectQuizzes == 2) {
		// Both quizzes are completed for this block and are correct
		values.numBlockQuizzesPassedTotal = values.numBlockQuizzesPassedTotal + 1;
		values.numBlockQuizzesPassedInARow = values.numBlockQuizzesPassedInARow + 1;
	} else if (values.instruQuizTrialNum == 2 && values.thisBlockCorrectQuizzes < 2) {
		// Both quizzes are completed for this block but atleast one quiz was incorrect
		values.numBlockQuizzesPassedInARow = values.numBlockQuizzesPassedInARow - 1;
	}
]
/ branch = [
	if (values.instruQuizTrialNum < 2) {
		return trial.instruQuiz;
	}
]
</trial>


<block instBlock> // repeat blocks upto 8 times and a minimum of 2 times till the participant answers questions correctly two times in a row
/ onblockbegin = [
	values.phaseName = "instruBlock";
]
/ trials = [
	1 = sendInstruBlockBeginPhysio;
	2-51 = instruITI_start;
	52 = instruQuiz;
]
/ screencapture = true
/ datastreams = (eyetracker)
/ branch = [
	if (values.numBlockQuizzesPassedInARow < 2 && values.instruBlockNum < 8) {
		return block.instBlock;
	} else if (values.numBlockQuizzesPassedInARow < 2 && values.instruBlockNum == 8) {
		return block.instruTermination;
	} else if (values.numBlockQuizzesPassedInARow == 2 && values.instruBlockNum <= 8){
		return block.pavPhaseInstructions;
	}
]
</block>



<text instruTermination>
/ items = ("You did not learn the contingency to turn off the alarms.
~nUnfortunately you cannot continue playing the task.")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial instruTermination>
/ ontrialbegin = [
	values.trialStartTime = script.elapsedtime;
]
/ beginresponsetime = 200
/ stimulustimes = [0 = clearscreen, instruTermination, spaceBarEndInstructions]
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>

<block instruTermination>
/ trials = [
	1 = instruTermination;
]
/ screencapture = true
/ datastreams = (eyetracker)
</block>


**************************************************************************************************************
Pavlovian phase instructions
**************************************************************************************************************
The humans and fractals are displayed together with its corresponding outcome.
The combination of human and fractal will be randomized and the location (right or left) where each one appears will also be randomized.


<item pavInstructions>
/ 1 = "In this phase, your task is to observe system alerts and learn which signals predict malfunctions."
/ 2 = "On each trial, you will see two types of alerts: Sensor alerts (fractal symbols) and Coworker alerts (speech bubbles from a colleague). These alerts appear together in the center of the control panel."
/ 3 = "After a short delay, you may experience a system malfunction (an warning image with a loud noise) or a message indicating the system remained stable.
~n~nYou do not need to press anything during this phase. Just watch and try to learn which alert pairs tend to predict system failures."
/ 4 = "At the end of each block, you'll answer questions to test your memory of which alerts were followed by which outcomes. You will continue to the next phase once you have correctly learned these associations."
</item>

<text pavInstructions>
/ items = pavInstructions
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.pavInstructionIndex
</text>

<trial pavInstructions>
/ ontrialbegin = [
	values.rightInstButtonRelatedHuman = list.humanAssignment.nextvalue;
	values.leftInstButtonRelatedHuman = list.humanAssignment.nextvalue;
	values.pavOnlyHuman = list.humanAssignment.nextvalue;
	values.rightInstButtonRelatedFractal = list.fractalAssignment.nextvalue;
	values.leftInstButtonRelatedFractal = list.fractalAssignment.nextvalue;
	values.pavOnlyFractal = list.fractalAssignment.nextvalue;
	values.trialStartTime = trial.pavInstructions.timestamp;
	values.pavInstructionIndex = values.pavInstructionIndex + 1;
]
/ stimulusframes = [1 = clearscreen, pavInstructions, spaceBarContinueInstructions]
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>

<trial sendPavBeginPhysio>
/ stimulustimes = [0 = sendPavBeginPhysio]
/ trialduration = 300
/ recorddata = false
/ screencapture = false
/ validresponse = (0)
</trial>

<block pavPhaseInstructions>
/ onblockbegin = [
	values.phaseName = "pavInstructions";
	values.pavInstructionIndex = 0;
	values.pavSetupTrialsCounter = 0;
]
/ trials = [
	1-4 = pavInstructions;
	5 = sendPavBeginPhysio;
]
/ datastreams = (eyetracker)
/ recorddata = true
/ branch = [
	return block.pavBlock;
]
</block>


**************************************************************************************************************
Pavlovian phase:
**************************************************************************************************************
<list humanAssignment>
/ items = (1, 2, 3)
/ selectionmode = random
/ replace = false
/ selectionrate = always
</list>

<list fractalAssignment>
/ items = (1, 2, 3)
/ selectionmode = random
/ replace = false
/ selectionrate = always
</list>

<list pavHumanSide>
/ items = ("l", "r")
/ itemprobabilities = (0.5, 0.5)
/ poolsize = 30
/ replace = false
/ selectionmode = random
/ selectionrate = always
</list>

<list rightInstruOutcomePav>
/ items = (-1, 0)
/ itemprobabilities = (0.8, 0.2)
/ poolsize = 10
/ replace = false
/ selectionrate = always
/ selectionmode = random
</list>

<list leftInstruOutcomePav>
/ items = (-1, 0)
/ itemprobabilities = (0.8, 0.2)
/ poolsize = 10
/ replace = false
/ selectionrate = always
/ selectionmode = random
</list>

<list pavTrialType>
/ items = ("r","r","r","r","r","r","r","r","r","r", 
"l","l","l","l","l","l","l","l","l","l",
"p","p","p","p","p","p","p","p","p","p")
/ selectionrate = always
/ replace = false
/ selectionmode = random
</list>


<trial pavITI>
/ ontrialbegin = [
	values.chooseAversiveOutcome = "";
	values.pavTrialNum += 1;
	values.chooseSound = "";
	// select which of the three sets to show: right/left instru option related or pav only neutral stimuli
	// 8 out of 10 trials for one set of cues + outcome will be aversive for right/left instru option related
	// first select if this trial showing right/left/pavOnly(safe) related cues
	values.tempTrialType = list.pavTrialType.nextvalue;
	if (values.tempTrialType == "r") {
		values.chooseSocialStimuli = values.rightInstButtonRelatedHuman;
		values.chooseFractalStimuli = values.rightInstButtonRelatedFractal;
		values.chooseAversiveOutcome = values.instRightAversiveOutcome;
	} else if (values.tempTrialType == "l") {
		values.chooseSocialStimuli = values.leftInstButtonRelatedHuman;
		values.chooseFractalStimuli = values.leftInstButtonRelatedFractal;
		values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
	} else if (values.tempTrialType == "p") {
		values.chooseSocialStimuli = values.pavOnlyHuman;
		values.chooseFractalStimuli = values.pavOnlyFractal;
		values.chooseAversiveOutcome = "";
	}
	// then choose probability of negative outcome for right/left related cues
	if (values.tempTrialType == "l") {
		values.pavOutcomeType = list.leftInstruOutcomePav.nextvalue;
	} else if (values.tempTrialType == "r") {
		values.pavOutcomeType = list.rightInstruOutcomePav.nextvalue;
	} else {
		values.pavOutcomeType = "";
	}
	values.trialStartTime = trial.pavITI.timestamp;
	
	values.pavQuizResponse = "";
	values.markerETtrialID = 202;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.pavTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 500);
	values.markerETDisplayOn = 3050;
	values.markerETdisplayOff = 5050;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
]
/ stimulustimes = [0 = clearscreen, controlPanel, portETtrialID; 1 = portETdisplayOn; 998 = portETdisplayOff; 999 = portETtrialEnd] // 4998 = portETdisplayOff; 4999 = portETtrialEnd]
/ trialduration = 5000
/ recorddata = false
/ validresponse = (0)
/ screencapture = false
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
/ branch = [
	return trial.pavTrial;
]
</trial>

<trial pavTrial>
/ ontrialbegin = [
	// assign left or right side for human and fractal
	values.pavTrialHumanSide = list.pavHumanSide.nextvalue;
	if (values.pavTrialHumanSide == "l") {
		values.socialXPos = parameters.pavLeftXPos;
		values.fractalXPos = parameters.pavRightXPos;
	} else if (values.pavTrialHumanSide == "r") {
		values.socialXPos = parameters.pavRightXPos;
		values.fractalXPos = parameters.pavLeftXPos;
	} else {
		values.socialXPos = 50%;
		values.fractalXPos = 50%;
	}
]
/ stimulustimes = [0 = controlPanel, socialStimuli, fractalStimuli]
/ trialduration = 5000
/ recorddata = true
/ screencapture = true
/ branch = [
	return trial.pavOutcome;
]
</trial>

<trial pavOutcome>
/ ontrialbegin = [
	if (values.tempTrialType == "r") {
		values.chooseAversiveOutcome = values.instRightAversiveOutcome;
		values.chooseSound = values.rightButtonAversiveSound;
	} else if (values.tempTrialType == "l") {
		values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
		values.chooseSound = values.leftButtonAversiveSound;
	} else if (values.tempTrialType == "p") {
		values.chooseAversiveOutcome = "";
	}
	values.aversiveOutcomeYPos = 50%;
	values.alarmTurnedOffYPos = 52.5%;
	values.trialStartTime = trial.pavOutcome.timestamp;
	values.markerETtrialID = 202;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.pavTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 2);
	// values.markerETtrialID = concat(values.markerETtrialID, values.ETelementName);
	values.markerETtrialID = concat(values.markerETtrialID, 0);
	values.markerETDisplayOn = 302;
	//values.markerETDisplayOn = concat(values.markerETDisplayOn, values.ETelementName);
	values.markerETdisplayOff = 502;
	//values.markerETdisplayOff = concat(values.markerETdisplayOff, values.ETelementName);
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	if (values.tempTrialType == "p") {
		trial.pavOutcome.insertstimulustime(picture.alarmTurnedOff, 0);
	} else {
		if (values.pavOutcomeType == -1) {
			trial.pavOutcome.insertstimulustime(picture.aversiveOutcomeStimuli, 0);
			trial.pavOutcome.insertstimulustime(sound.allTestSounds, 0);
		} else {
			trial.pavOutcome.insertstimulustime(picture.alarmTurnedOff, 0);
		}
	}
]
/ stimulustimes = [0 = controlPanel, socialStimuli, fractalStimuli, portETtrialID; 1 = portETdisplayOn; 998 = portETdisplayOff; 999 = portETtrialEnd]
/ trialduration = 1000
/ recorddata = true
/ screencapture = true
/ ontrialend = [
	trial.pavOutcome.resetstimulusframes();
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>


<list pavQuizSeq>
/ items = ("social", "social", "social", "fractal", "fractal", "fractal")
/ poolsize = 6
/ replace = false
/ selectionrate = always
</list>

<list pavQuizSocial>
/ items = (1,2,3)
/ poolsize = 3
/ replace = false
/ selectionrate = always
</list>

<list pavQuizFractal>
/ items = (1,2,3)
/ poolsize = 3
/ replace = false
/ selectionrate = always
</list>

<list pavQuizAversiveOutcomeWithSocial>
/ items = ("safe", "leftInstru", "rightInstru")
/ poolsize = 3
/ replace = false
/ selectionrate = always
</list>

<list pavQuizAversiveOutcomeWithFractal>
/ items = ("safe", "leftInstru", "rightInstru")
/ poolsize = 3
/ replace = false
/ selectionrate = always
</list>


<trial pavQuizzes>
/ ontrialbegin = [
//	list.pavQuizOptionSize.reset();
	list.pavQuizXloc.reset();
	values.aversiveOutcomeYPos = 20%;
	values.alarmTurnedOffYPos = 20%;
	values.pavQuizType = list.pavQuizSeq.nextvalue;
	if (values.pavQuizType == "social") {
		values.chooseSocialStimuli = list.pavQuizSocial.nextvalue;
		values.chooseFractalStimuli = "";
	} else if (values.pavQuizType == "fractal") {
		values.chooseFractalStimuli = list.pavQuizFractal.nextvalue;
		values.chooseSocialStimuli = "";
	} else {
		values.pavQuizType = "";
		values.chooseSocialStimuli = "";
		values.chooseFractalStimuli = "";
	}
]
/ stimulustimes = [0 = clearscreen]
/ trialduration = 2
/ validresponse = (0)
/ recorddata = false
/ screencapture = false
/ branch = [
	if (values.pavQuizType == "social") {
		return trial.pavQuizSocial;
	} else if (values.pavQuizType == "fractal") {
		return trial.pavQuizFractal;
	}
]
</trial>

<list pavQuizXloc>
/ items = (25%, 50%, 75%)
/ replace = false
/ poolsize = 3
/ selectionmode = random
/ selectionrate = always
</list>

<trial pavQuizSocial>
/ ontrialbegin = [
	values.pavITIDur = "";
	values.trialStartTime = script.elapsedtime;
	values.markerETtrialID = 202;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.pavTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 301);
	values.markerETDisplayOn = 3030;
	values.markerETdisplayOff = 5030;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	
	values.typeOfAlert = "coworker";
	values.pavQuizOutcomeType = list.pavQuizAversiveOutcomeWithSocial.nextvalue;
	
	values.socialXPos1 = list.pavQuizXloc.nextvalue;
	values.socialXPos2 = list.pavQuizXloc.nextvalue;
	values.socialXPos3 = list.pavQuizXloc.nextvalue;
	
	if (values.pavQuizOutcomeType == "leftInstru"){
		values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
		values.chooseSound = values.leftButtonAversiveSound;
		trial.pavQuizSocial.insertstimulustime(picture.aversiveOutcomeStimuli, 0)
		trial.pavQuizSocial.insertstimulustime(sound.allTestSounds, 0)
	} else if (values.pavQuizOutcomeType == "rightInstru"){
		values.chooseAversiveOutcome = values.instRightAversiveOutcome;
		values.chooseSound = values.rightButtonAversiveSound;
		trial.pavQuizSocial.insertstimulustime(picture.aversiveOutcomeStimuli, 0)
		trial.pavQuizSocial.insertstimulustime(sound.allTestSounds, 0)
	} else if (values.pavQuizOutcomeType == "safe"){
		trial.pavQuizSocial.insertstimulustime(picture.alarmTurnedOff, 0)
	}
	
]
/ stimulustimes = [0 = clearscreen, pavQuizPhysio, pavQuizQuestionSocial, pavQuizBackPanel, socialStimuli1, socialStimuli2, socialStimuli3, portETtrialID; 1 = portETdisplayOn]
/ recorddata = true
/ inputdevice = mouse
/ screencapture = true
/ validresponse = (picture.socialStimuli1, picture.socialStimuli2, picture.socialStimuli3)
/ ontrialend = [
	if (values.pavQuizOutcomeType == "leftInstru"){
		values.pavQuizCorrectAnswer = values.leftInstButtonRelatedFractal;
	} else if (values.pavQuizOutcomeType == "rightInstru"){
		values.pavQuizCorrectAnswer = values.rightInstButtonRelatedFractal;
	} else if (values.pavQuizOutcomeType == "safe"){
		values.pavQuizCorrectAnswer = values.pavOnlyFractal;
	}

	if (trial.pavQuizSocial.response == "socialStimuli1" && values.pavQuizCorrectAnswer == 1) {
		values.pavQuizAnswerGiven = 1;
		values.pavQuizIsCorrect = 1;
	} else if (trial.pavQuizSocial.response == "socialStimuli2" && values.pavQuizCorrectAnswer == 2) {
		values.pavQuizAnswerGiven = 2;
		values.pavQuizIsCorrect = 1;
	} else if (trial.pavQuizSocial.response == "socialStimuli3" && values.pavQuizCorrectAnswer == 3) {
		values.pavQuizAnswerGiven = 3;
		values.pavQuizIsCorrect = 1;
	} else {
		values.pavQuizIsCorrect = 0;
	};
	
	if (values.pavQuizIsCorrect == 1) {
		values.numPavBlockCorrectQuiz += 1;
	};
	
	if (trial.pavQuizSocial.response == "socialStimuli1"){
		values.pavQuizResponse = 1;
	} else if (trial.pavQuizSocial.response == "socialStimuli2"){
		values.pavQuizResponse = 2;
	} else if (trial.pavQuizSocial.response == "socialStimuli3"){
		values.pavQuizResponse = 3;
	}
	
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
	
	trial.pavQuizSocial.resetstimulusframes();
]
/ branch = [
	return trial.pavQuizEnd;
]
</trial>

<list pavQuizOptionSize>
/ items = ("1", "2", "3") // from left size
/ poolsize = 3
/ replace = false
/ selectionrate = always
/ selectionmode = random
</list>

<text pavQuizQuestionSocial>
/ items = ("Which coworker alert was associated with this outcome?")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 20%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<text pavQuizQuestionFractal>
/ items = ("Which sensor alert was associated with this outcome?")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 20%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial pavQuizFractal>
/ ontrialbegin = [
	values.pavITIDur = "";
	values.trialStartTime = script.elapsedtime;
	values.markerETtrialID = 202;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.pavTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 301);
	values.markerETDisplayOn = 3030;
	values.markerETdisplayOff = 5030;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	
	values.typeOfAlert = "sensor";
	values.pavQuizOutcomeType = list.pavQuizAversiveOutcomeWithFractal.nextvalue;

	values.fractalXPos1 = list.pavQuizXloc.nextvalue;
	values.fractalXPos2 = list.pavQuizXloc.nextvalue;
	values.fractalXPos3 = list.pavQuizXloc.nextvalue;
	
	if (values.pavQuizOutcomeType == "leftInstru"){
		values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
		values.chooseSound = values.leftButtonAversiveSound;
		trial.pavQuizFractal.insertstimulustime(picture.aversiveOutcomeStimuli, 0)
		trial.pavQuizFractal.insertstimulustime(sound.allTestSounds, 0)
	} else if (values.pavQuizOutcomeType == "rightInstru"){
		values.chooseAversiveOutcome = values.instRightAversiveOutcome;
		values.chooseSound = values.rightButtonAversiveSound;
		trial.pavQuizFractal.insertstimulustime(picture.aversiveOutcomeStimuli, 0)
		trial.pavQuizFractal.insertstimulustime(sound.allTestSounds, 0)
	} else if (values.pavQuizOutcomeType == "safe"){
		trial.pavQuizFractal.insertstimulustime(picture.alarmTurnedOff, 0)
	}
]
/ stimulustimes = [0 = clearscreen, pavQuizPhysio, pavQuizQuestionFractal, pavQuizBackPanel, fractalStimuli1, fractalStimuli2, fractalStimuli3, portETtrialID; 1 = portETdisplayOn]
/ recorddata = true
/ screencapture = true
/ inputdevice = mouse
/ validresponse = (picture.fractalStimuli1, picture.fractalStimuli2, picture.fractalStimuli3)
/ ontrialend = [
	if (values.pavQuizOutcomeType == "leftInstru"){
		values.pavQuizCorrectAnswer = values.leftInstButtonRelatedFractal;
	} else if (values.pavQuizOutcomeType == "rightInstru"){
		values.pavQuizCorrectAnswer = values.rightInstButtonRelatedFractal;
	} else if (values.pavQuizOutcomeType == "safe"){
		values.pavQuizCorrectAnswer = values.pavOnlyFractal;
	}

	if (trial.pavQuizFractal.response == "fractalStimuli1" && values.pavQuizCorrectAnswer == 1) {
		values.pavQuizAnswerGiven = 1;
		values.pavQuizIsCorrect = 1;
	} else if (trial.pavQuizFractal.response == "fractalStimuli2" && values.pavQuizCorrectAnswer == 2) {
		values.pavQuizAnswerGiven = 2;
		values.pavQuizIsCorrect = 1;
	} else if (trial.pavQuizFractal.response == "fractalStimuli3" && values.pavQuizCorrectAnswer == 3) {
		values.pavQuizAnswerGiven = 3;
		values.pavQuizIsCorrect = 1;
	} else {
		values.pavQuizIsCorrect = 0;
	};
	
	if (values.pavQuizIsCorrect == 1) {
		values.numPavBlockCorrectQuiz += 1;
	};
	
	if (trial.pavQuizFractal.response == "fractalStimuli1"){
		values.pavQuizResponse = 1;
	} else if (trial.pavQuizFractal.response == "fractalStimuli2"){
		values.pavQuizResponse = 2;
	} else if (trial.pavQuizFractal.response == "fractalStimuli3"){
		values.pavQuizResponse = 3;
	}

	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;

	trial.pavQuizFractal.resetstimulusframes();
]
/ branch = [
	return trial.pavQuizEnd;
]
</trial>

<trial pavQuizEnd>
/ ontrialbegin = [	
	if (values.pavQuizIsCorrect == 1){
		values.pavBlockQuizNumCorrect = values.pavBlockQuizNumCorrect + 1;
	}
]
/ stimulustimes = [0 = portETdisplayOff; 1 = portETtrialEnd]
/ trialduration = 2
/ recorddata = false
/ screencapture = false
</trial>

<trial sendPavBlockBeginPhysio>
/ stimulustimes = [0 = sendPavBlockBeginPhysio]
/ trialduration = 300
/ recorddata = false
/ screencapture = false
/ validresponse = (0)
</trial>

<block pavBlock>
/ onblockbegin = [
	values.phaseName = "pavBlock";
	values.pavBlockNum = values.pavBlockNum + 1;
	values.pavBlockQuizNumCorrect = 0;
]
/ trials = [
	1 = sendPavBlockBeginPhysio;
	2-31 = pavITI;
	32-37 = pavQuizzes;
]
/ screencapture = true
/ datastreams = (eyetracker)
/ onblockend = [
	if (values.pavBlockQuizNumCorrect == 6){ // all quizzes in this block are correct
		values.pavQuizzesInARowCorrect = values.pavQuizzesInARowCorrect + 1;
	} else if (values.pavBlockQuizNumCorrect < 6){
		values.pavQuizzesInARowCorrect = 0;
	}	
	values.aversiveOutcomeYPos = 50%;
	values.alarmTurnedOffYPos = 52.5%;
]
/ branch = [
	if (values.pavBlockNum < 2) {
		return block.pavBlock;
	} else if (values.pavBlockNum >= 2 && values.pavBlockNum < 8 && values.pavQuizzesInARowCorrect < 2 && values.pavBlockQuizNumCorrect == 0){ // no quizzes correct, redo entire block again
		return block.pavBlock;
	} else if (values.pavBlockNum >= 2 && values.pavBlockNum < 8 && values.pavQuizzesInARowCorrect == 2){ // move to PIT phase
		return block.pitPhaseInstructions;
	} else if (values.pavBlockNum == 8 && values.pavQuizzesInARowCorrect < 2) {
		return block.pavTermination;
	}
]
</block>

		if (values.pavBlockNum < 2) {
		return block.pavBlock;
	} else if (values.pavBlockNum >= 2 && values.pavBlockNum < 8 && values.pavQuizzesInARowCorrect < 2 && values.pavBlockQuizNumCorrect == 0){ // no quizzes correct, redo entire block again
		return block.pavBlock;
	} else if (values.pavBlockNum >= 2 && values.pavBlockNum < 8 && values.pavQuizzesInARowCorrect < 2 && values.pavBlockQuizNumCorrect < 6 && values.pavBlockQuizNumCorrect > 0){
		return block.pavBlock_trainOnlyIncorrect;
	} else if (values.pavBlockNum >= 2 && values.pavBlockNum < 8 && values.pavQuizzesInARowCorrect == 2){ // move to PIT phase
		return block.pitPhaseInstructions;
	} else if (values.pavBlockNum == 8 && values.pavQuizzesInARowCorrect < 2) {
		return block.pavTermination;
	}

<text pavTermination>
/ items = ("You did not learn the association between alerts and alarms.
~nUnfortunately you cannot continue playing the task.")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial pavTermination>
/ ontrialbegin = [
	values.trialStartTime = script.elapsedtime;
]
/ beginresponsetime = 200
/ stimulustimes = [0 = clearscreen, pavTermination, spaceBarEndInstructions]
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>

<block pavTermination>
/ trials = [
	1 = pavTermination;
]
/ screencapture = true
/ datastreams = (eyetracker)
</block>





**************************************************************************************************************
PIT phase instructions
**************************************************************************************************************

<item pitInstructions>
/ 1 = "Now it’s time to combine what you’ve learned.
~n~nIn each trial, you will again see the control panel and two levers, just like in the first phase."
/ 2 = "Occasionally, one of the alerts from the previous phase (a sensor or a coworker alert) will appear in the center of the screen along with the levers."
/ 3 = "Sometimes the alerts are helpful, but sometimes they are misleading. Your goal is to learn the best lever responses to avoid system failures while also interpreting the warning signals when they appear."
/ 4 = "If you fail to respond in time, a disruptive alarm will be triggered. Try to make choices based on your experience managing the levers."
</item>

<text pitInstructions>
/ items = pitInstructions
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.pitInstructionIndex
</text>

<trial pitInstructions>
/ ontrialbegin = [
	values.trialStartTime = trial.pitInstructions.timestamp;
	values.pitInstructionIndex = values.pitInstructionIndex + 1;
]
/ stimulusframes = [1 = clearscreen, pitInstructions, spaceBarContinueInstructions]
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
</trial>

<block pitPhaseInstructions>
/ onblockbegin = [
	values.phaseName = "pitInstructions";
	values.pavInstructionIndex = 0;
	values.pavSetupTrialsCounter = 0;
]
/ trials = [
	1-4 = pitInstructions;
]
/ branch = [
	return block.pitBlock;
]
/ datastreams = (eyetracker)
/ recorddata = true
</block>


**************************************************************************************************************
PIT Phase 
**************************************************************************************************************

<expressions>
/ PITphaseITI = rand(parameters.pitITImin, parameters.pitITImax)
</expressions>

<trial pitITIStart>
/ ontrialbegin = [
	values.pitTrialNum += 1;
	values.pitITIDur = format("%.2f", expressions.PITphaseITI - 2) + 2;
	values.trialStartTime = trial.pitITIStart.timestamp;
	values.pavQuizResponse = "";
	values.markerETtrialID = 202;
	values.markerETtrialID = concat(values.markerETtrialID, format("%02d", values.pitTrialNum));
	values.markerETtrialID = concat(values.markerETtrialID, 500);
	values.markerETDisplayOn = 3050;
	values.markerETdisplayOff = 5050;
	expressions.setport3;
	expressions.setport4;
	expressions.setport5;
	values.chooseSound = "";
]
/ stimulustimes = [0 = clearscreen, controlPanel, portETtrialID; 1 = portETdisplayOn]
/ trialduration = values.pitITIDur - 2
/ recorddata = false
/ validresponse = (0)
/ screencapture = false
/ branch = [
	return trial.pitITI;
]
</trial>

<trial pitITI>
/ stimulustimes = [0 = portETdisplayOff; 1 = portETtrialEnd]
/ trialduration = 2
/ validresponse = (0)
/ recorddata = true
/ screencapture = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
/ branch = [
	return trial.pitTrial;
]
</trial>

<list pitTrialType>
/ items = (1,2,3,4,5,6,7)
/ poolsize = 210
/ replace = false
/ selectionrate = always
</list>

<trial pitTrial>
/ ontrialbegin = [
	values.pitTrialTypeNum = list.pitTrialType.nextvalue;
	values.chooseAversiveOutcome = "";
	values.chooseSound = "";
	if (values.pitTrialTypeNum == 1){
		values.rightSocialTrialNum = values.rightSocialTrialNum + 1;
		values.pitTrialType = "inst right associated social cue";
		values.chooseSocialStimuli = values.rightInstButtonRelatedHuman;
		values.chooseFractalStimuli = "";
		values.pitCueAssociatedButton = "right";
		trial.pitTrial.insertstimulustime(picture.socialStimuli, 0);
	} else if (values.pitTrialTypeNum == 2){
		values.leftSocialTrialNum = values.leftSocialTrialNum + 1;
		values.pitTrialType = "inst left associated social cue";
		values.chooseSocialStimuli = values.leftInstButtonRelatedHuman;
		values.chooseFractalStimuli = "";
		values.pitCueAssociatedButton = "left";
		trial.pitTrial.insertstimulustime(picture.socialStimuli, 0);
	} else if (values.pitTrialTypeNum == 3){
		values.rightFractalTrialNum = values.rightFractalTrialNum + 1;
		values.pitTrialType = "inst right associated fractal cue";
		values.chooseSocialStimuli = "";
		values.chooseFractalStimuli = values.rightInstButtonRelatedFractal;
		values.pitCueAssociatedButton = "right";
		trial.pitTrial.insertstimulustime(picture.fractalStimuli, 0);
	} else if (values.pitTrialTypeNum == 4){
		values.leftFractalTrialNum = values.leftFractalTrialNum + 1;
		values.pitTrialType = "inst left associated fractal cue";
		values.chooseSocialStimuli = "";
		values.chooseFractalStimuli = values.leftInstButtonRelatedFractal;
		values.pitCueAssociatedButton = "left";
		trial.pitTrial.insertstimulustime(picture.fractalStimuli, 0);
	} else if (values.pitTrialTypeNum == 5){
		values.safeSocialTrialNum = values.safeSocialTrialNum + 1;
		values.pitTrialType = "safety associated social cue";
		values.chooseSocialStimuli = values.pavOnlyHuman;
		values.chooseFractalStimuli = "";
		values.pitCueAssociatedButton = "safety";
		trial.pitTrial.insertstimulustime(picture.socialStimuli, 0);
	} else if (values.pitTrialTypeNum == 6){
		values.safeFractalTrialNum = values.safeFractalTrialNum + 1;
		values.pitTrialType = "safety associated fractal cue";
		values.chooseSocialStimuli = "";
		values.chooseFractalStimuli = values.pavOnlyFractal;
		values.pitCueAssociatedButton = "safety";
		trial.pitTrial.insertstimulustime(picture.fractalStimuli, 0);
	} else {
		values.noPavCueTrialNum = values.noPavCueTrialNum + 1;
		values.pitTrialType = "no cue";
		values.chooseSocialStimuli = "";
		values.chooseFractalStimuli = "";
		values.pitCueAssociatedButton = "safety";
	}
]
/ stimulustimes = [0 = controlPanel, leverBothUpright, portETtrialID; 1 = portETdisplayOn; 1498 = portETdisplayOff; 1499 = portETtrialEnd] 
/ beginresponsetime = 0
/ validresponse = (parameters.leftButtonBox, parameters.rightButtonBox)
/ isvalidresponse = [
	if (trial.pitTrial.response == parameters.leftButtonBox) {
		values.responseKeyPressed = "left";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.pitTrial.elapsedtime;
		true;
	} else if (trial.pitTrial.response == parameters.rightButtonBox) {
		values.responseKeyPressed = "right";
		values.RTFromScriptStart = script.elapsedtime;
		values.RTfromTrialStart = trial.pitTrial.elapsedtime;	
		true;
	};
]
/ responsemessage = (parameters.leftButtonBox, portETbuttonPressLeft, 1)
/ responsemessage = (parameters.leftButtonBox, leftStimuliChosenPhysio, 200)
/ responsemessage = (parameters.rightButtonBox, portETbuttonPressRight, 1)
/ responsemessage = (parameters.rightButtonBox, rightStimuliChosenPhysio, 200)
/ timeout = parameters.instruResponseMaxTime -1 
/ screencapture = true
/ recorddata = true
/ responseinterrupt = immediate
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
]
/ branch = [
	return trial.pitFeedback;
]
</trial>


<list pitProbRichOption> // rich option has 70% probability of preventing the aversive outcome
/ items = (0, -1) 
/ itemprobabilities = (0.7, 0.3)
/ poolsize = 210
/ selectionmode = random
/ replace = true
/ selectionrate = always
</list>

<list pitProbPoorOption> // poor option has 30% probability of preventing the aversive outcome
/ items = (-1, 0) 
/ itemprobabilities = (0.7, 0.3)
/ poolsize = 210
/ selectionmode = random
/ replace = true
/ selectionrate = always
</list>

<trial pitFeedback>
/ ontrialbegin = [
	if (trial.pitTrial.response == parameters.leftButtonBox) {
		values.pitResponseSide = "left";
		trial.pitFeedback.insertStimulustime(picture.leverLeftDown, 0);
		// choosing if we should provide the aversive or alarm turned off outcome
		if (values.richInstOption == "l") {
			values.pitResponseRichOption = "rich";
			// if left button is the rich instrumental option
			// rich option means that left button prevents the aversive outcome O1 with a 70% probability.
			values.currentOutcome = list.pitProbRichOption.nextvalue;
			// 0 means alarm turned off outcome; -1 means aversive outcome
		} else if (values.poorInstOption == "l") {
			values.pitResponseRichOption = "poor";
			// if left button is the poor instrumental option
			values.currentOutcome = list.pitProbPoorOption.nextvalue;
		}
		if (values.currentOutcome == -1) {
			values.chooseAversiveOutcome = values.instLeftAversiveOutcome;
			trial.pitFeedback.insertstimulustime(picture.aversiveOutcomeStimuli, 0);
			values.chooseSound = values.leftButtonAversiveSound;
			trial.pitFeedback.insertstimulustime(sound.allTestSounds, 0);
		} else {
			values.chooseAversiveOutcome = 0;
			trial.pitFeedback.insertstimulustime(picture.alarmTurnedOff, 0);
		}
	} else if (trial.pitTrial.response == parameters.rightButtonBox) {
		values.pitResponseSide = "right";
		trial.pitFeedback.insertStimulustime(picture.leverRightDown, 0);
		// choosing if we should provide the aversive or alarm turned off outcome
		if (values.richInstOption == "r") {
			values.pitResponseRichOption = "rich";
			// if left button is the rich instrumental option
			// rich option means that left button prevents the aversive outcome O1 with a 70% probability.
			values.currentOutcome = list.pitProbRichOption.nextvalue;
			// 0 means alarm turned off outcome; -1 means aversive outcome
		} else if (values.poorInstOption == "r") {
			values.pitResponseRichOption = "poor";
			// if left button is the poor instrumental option
			values.currentOutcome = list.pitProbPoorOption.nextvalue;
		}
		if (values.currentOutcome == -1) {
			values.chooseAversiveOutcome = values.instRightAversiveOutcome;
			trial.pitFeedback.insertstimulustime(picture.aversiveOutcomeStimuli, 0);
			values.chooseSound = values.rightButtonAversiveSound;
			trial.pitFeedback.insertstimulustime(sound.allTestSounds, 0);
		} else {
			values.chooseAversiveOutcome = 0;
			trial.pitFeedback.insertstimulustime(picture.alarmTurnedOff, 0);
		}
	} else {
		// if no button is pressed, the participants receive a 3rd aversive noise
		trial.pitFeedback.insertStimulusTime(picture.leverBothUpright, 0);
		values.chooseSound = values.sound3rdAversive;
		trial.pitFeedback.insertStimulusTime(sound.allTestSounds, 0);
	}
]
/ stimulustimes = [0 = portETtrialID; 1 = portETdisplayOn; 997 = portETdisplayOff; 998 = portETtrialEnd] 
/ response = noresponse
/ trialduration = parameters.PITFeedbackDur -1
/ screencapture = true
/ recorddata = true
/ ontrialend = [
	values.trialEndTime = script.elapsedtime;
	values.trialDur = values.trialEndTime - values.trialStartTime;
	trial.pitTrial.resetstimulusframes();
	trial.pitFeedback.resetstimulusframes();
]
</trial>

<text endPITtext>
/ items = ("Congratulations! You have successfully completed the game.
~n~n~n~n~n~n~nPress center button on the box to exit")
/ fontstyle = ("Arial", 3.5%, false, false, false, false, 5, 1)
/ position = (50%, 40%)
/ size = (80%, 5%)
</text> 

<trial PITend>
/ stimulusframes = [1 = endPITtext, experimentEndPhysio, portETexptEnd] 
/ validresponse = (parameters.spaceButtonBox)
/ correctresponse = (parameters.spaceButtonBox) 
/ recorddata = false
/ screencapture = true
</trial>

<trial sendPITBlockBeginPhysio>
/ stimulusframes = [1 = clearscreen, sendPitBeginPhysio] 
/ validresponse = (0)
/ trialduration = 2 
/ recorddata = false
/ screencapture = false
</trial>

<block pitBlock>
/ onblockbegin = [
	values.phaseName = "pitBlock";
	values.pitTrialNum = 0;
	values.rightSocialTrialNum = 0; 	// 1
	values.leftSocialTrialNum = 0; 		// 2
	values.rightFractalTrialNum = 0;	// 3
	values.leftFractalTrialNum = 0; 	// 4
	values.safeSocialTrialNum = 0; 		// 5
	values.safeFractalTrialNum = 0; 	// 6
	values.noPavCueTrialNum = 0;		// 7
	
	values.socialXPos = 50%;
	values.fractalXPos = 50%;
	
]
/ trials = [	
	1 = sendPITBlockBeginPhysio;
	2-211 = pitITIStart;
	212 = PITend;
]
/ screencapture = true
/ datastreams = (eyetracker)
</block>










